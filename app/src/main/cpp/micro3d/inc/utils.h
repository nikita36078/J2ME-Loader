/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <cstring>
#include <GLES2/gl2.h>
#include <GLES2/gl2ext.h>
#include <android/bitmap.h>
#include <android/log.h>
/* Header for class com_mascotcapsule_micro3d_v3_Utils */

#ifndef _Included_com_mascotcapsule_micro3d_v3_Utils
#define _Included_com_mascotcapsule_micro3d_v3_Utils
#ifdef __cplusplus
extern "C" {
#endif

struct Matrix {
    float m00;
    float m01;
    float m02;
    float m03;
    float m10;
    float m11;
    float m12;
    float m13;
    float m20;
    float m21;
    float m22;
    float m23;
};

struct Bone {
    int length;
    int parent;
    Matrix matrix;
};

struct Vec3f {
    float x;
    float y;
    float z;
};

/*
 * Class:     com_mascotcapsule_micro3d_v3_Utils
 * Method:    fillBuffer
 * Signature: (Ljava/nio/FloatBuffer;Ljava/nio/FloatBuffer;[I)V
 */
JNIEXPORT void JNICALL Java_com_mascotcapsule_micro3d_v3_Utils_fillBuffer
        (JNIEnv *, jclass, jobject, jobject, jintArray);

/*
 * Class:     com_mascotcapsule_micro3d_v3_Utils
 * Method:    glReadPixels
 * Signature: (IIIILandroid/graphics/Bitmap;)V
 */
JNIEXPORT void JNICALL Java_com_mascotcapsule_micro3d_v3_Utils_glReadPixels
        (JNIEnv *, jclass, jint, jint, jint, jint, jobject);

/*
 * Class:     com_mascotcapsule_micro3d_v3_Utils
 * Method:    transform
 * Signature: (Ljava/nio/FloatBuffer;Ljava/nio/FloatBuffer;Ljava/nio/FloatBuffer;Ljava/nio/FloatBuffer;Ljava/nio/ByteBuffer;[F)V
 */
JNIEXPORT void JNICALL Java_com_mascotcapsule_micro3d_v3_Utils_transform
        (JNIEnv *, jclass,
         jobject, jobject,
         jobject, jobject,
         jobject, jfloatArray);

#define  LOG_TAG    "micro3d"
#define  LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG,__VA_ARGS__);
#define MICRO3D_RAISE_EXCEPTION(aEnv, aException, aMsg){\
                 if (aEnv != NULL){\
                jclass jException = aEnv->FindClass(aException);\
                if (jException != NULL){\
                    aEnv->ThrowNew(jException, aMsg);\
         }}}\

static void multiplyMM(Matrix *m, Matrix *lm, Matrix *rm);

static void multiplyMV(Vec3f *dst, Vec3f *src, Matrix *m);

static void multiplyMN(Vec3f *dst, Vec3f *src, Matrix *m);

#ifdef __cplusplus
}
#endif
#endif //_Included_com_mascotcapsule_micro3d_v3_Utils
